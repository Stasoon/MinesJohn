from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.utils.callback_data import CallbackData
from aiogram.types import KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery

from src.misc.admin_states import ReferralLinkStates
from src.database.reflink import create_reflink, is_reflink_exists, get_link_names, get_link, delete_reflink
from config import Config


reflinks_callback_data = CallbackData('referral_links', 'action')


class Keyboards:
    reply_button_for_admin_menu = KeyboardButton('üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ üîó')
    reflinks_markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data=reflinks_callback_data.new('create')),
        InlineKeyboardButton('‚ûñ –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data=reflinks_callback_data.new('delete')),
        InlineKeyboardButton('üìã –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫', callback_data=reflinks_callback_data.new('list')),
        InlineKeyboardButton('üîé –ù–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É', callback_data=reflinks_callback_data.new('find'))
    )

    cancel_markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton('üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=reflinks_callback_data.new('cancel'))
    )


class Handlers:
    @staticmethod
    async def __handle_admin_reflinks_button(message: Message):
        await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=Keyboards.reflinks_markup)

    @staticmethod
    async def __handle_add_link_callback(callback: CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await callback.message.answer('üîò –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã:',
                                      reply_markup=Keyboards.cancel_markup)
        await state.set_state(ReferralLinkStates.create)

    @staticmethod
    async def __handle_new_link_name(message: Message, state: FSMContext):
        if not message.text.isascii():
            await message.answer('‚ùó–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
                                 reply_markup=Keyboards.cancel_markup)
        elif not message.text.isalnum():
            await message.answer('‚ùó–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Å–∏–º–≤–æ–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
                                 reply_markup=Keyboards.cancel_markup)
        elif is_reflink_exists(message.text):
            await message.answer('‚ùó–¢–∞–∫–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
                                 reply_markup=Keyboards.cancel_markup)
        else:
            create_reflink(message.text)
            bot_username = (await message.bot.get_me()).username
            await message.answer('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. \n\n'
                                 f'<u><i>–ò–º—è —Å—Å—ã–ª–∫–∏</i></u>: <code>{message.text}</code> \n'
                                 f'<u><i>–°—Å—ã–ª–∫–∞</i></u>: <code>https://t.me/{bot_username}?start={message.text}</code>')
            await state.finish()

    @staticmethod
    async def __handle_delete_link_callback(callback: CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await callback.message.answer('üîò –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å. ',
                                      reply_markup=Keyboards.cancel_markup)
        await state.set_state(ReferralLinkStates.delete)

    @staticmethod
    async def __handle_link_to_delete_name(message: Message, state: FSMContext):
        if not is_reflink_exists(message.text):
            await message.answer('‚ùó–¢–∞–∫–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
                                 reply_markup=Keyboards.cancel_markup)
        else:
            delete_reflink(message.text)
            await message.answer('‚úÖ –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞')
            await state.finish()

    @staticmethod
    async def __handle_links_list(callback: CallbackQuery):
        text = '<b>–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:</b> \n\n'
        for n, name in enumerate(get_link_names(), 1):
            text += f'{n} ‚Äî <code>{name}</code> \n'
        await callback.message.delete()
        await callback.message.answer(text, reply_markup=Keyboards.cancel_markup)

    @staticmethod
    async def __handle_find_link_callback(callback: CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await callback.message.answer('üîé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏:', reply_markup=Keyboards.cancel_markup)
        await state.set_state(ReferralLinkStates.find)

    @staticmethod
    async def __handle_link_to_find_name(message: Message, state: FSMContext):
        link_data = get_link(message.text)
        if not get_link(message.text):
            await message.answer('‚ùó–í–≤–µ–¥—ë–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
                                 reply_markup=Keyboards.cancel_markup)
            return

        bot_username = (await message.bot.get_me()).username
        text = f'<b>–î–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏</b> \n\n' \
               f'–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏: {link_data[0]} \n' \
               f'–°—Å—ã–ª–∫–∞: <code>https://t.me/{bot_username}?start={link_data[0]}</code> \n' \
               f'üìä –ö–æ–ª-–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {link_data[1]} \n' \
               f'–ù–∞ –û–ü –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: {link_data[2]}'
        await message.answer(text, reply_markup=Keyboards.cancel_markup)
        await state.finish()

    @staticmethod
    async def __handle_cancel_callback(callback: CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await callback.message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=Keyboards.reflinks_markup)
        await state.finish()

    @classmethod
    def register_reflinks_handlers(cls, dp: Dispatcher):
        dp.register_message_handler(cls.__handle_admin_reflinks_button, is_admin=True,
                                    text=Keyboards.reply_button_for_admin_menu.text)

        # —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        dp.register_callback_query_handler(cls.__handle_add_link_callback,
                                           reflinks_callback_data.filter(action='create'),
                                           is_admin=True, state=None)
        dp.register_message_handler(cls.__handle_new_link_name, is_admin=True, state=ReferralLinkStates.create)

        # —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        dp.register_callback_query_handler(cls.__handle_delete_link_callback,
                                           reflinks_callback_data.filter(action='delete'), state=None)
        dp.register_message_handler(cls.__handle_link_to_delete_name, state=ReferralLinkStates.delete)

        # –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
        dp.register_callback_query_handler(cls.__handle_links_list, reflinks_callback_data.filter(action='list'))

        # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        dp.register_callback_query_handler(cls.__handle_find_link_callback,
                                           reflinks_callback_data.filter(action='find'), state=None)
        dp.register_message_handler(cls.__handle_link_to_find_name, state=ReferralLinkStates.find)

        # –æ—Ç–º–µ–Ω–∞
        dp.register_callback_query_handler(cls.__handle_cancel_callback, reflinks_callback_data.filter(action='cancel'),
                                           state='*')

