from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.utils.callback_data import CallbackData

from src.misc.admin_states import StatsGetting
from src.database.user import get_users_total_count, get_users_by_hours


statistic_callback_data = CallbackData('statistic', 'value')


class Keyboards:
    reply_button_for_admin_menu = KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä')

    menu_markup = InlineKeyboardMarkup(row_width=2)\
        .add(
        InlineKeyboardButton(text='–ú–µ—Å—è—Ü', callback_data=statistic_callback_data.new('month')),
        InlineKeyboardButton(text='–ù–µ–¥–µ–ª—è', callback_data=statistic_callback_data.new('week')),
        InlineKeyboardButton(text='–°—É—Ç–∫–∏', callback_data=statistic_callback_data.new('day')),
        InlineKeyboardButton(text='–ß–∞—Å', callback_data=statistic_callback_data.new('hour')),
        InlineKeyboardButton(text='üîÉ –í—Å—ë –≤—Ä–µ–º—è', callback_data=statistic_callback_data.new('all_time')),
        InlineKeyboardButton(text='‚å® –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data=statistic_callback_data.new('other')),
    )

    back_markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=statistic_callback_data.new('back'))
    )


class Messages:
    @staticmethod
    def get_menu():
        return 'üìä –í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:'

    @staticmethod
    def get_count_per_hours(time_word: str, hours: int):
        return f'–ó–∞ {time_word} –±–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å: \n<b>{get_users_by_hours(hours)} —é–∑–µ—Ä–∞(–æ–≤)</b>'


class Handlers:
    @staticmethod
    async def __handle_admin_statistic_button(message: Message):
        await message.answer(Messages.get_menu(), reply_markup=Keyboards.menu_markup)

    @staticmethod
    async def __handle_show_stats_callback(callback: CallbackQuery, state: FSMContext, callback_data: statistic_callback_data, ):
        value = callback_data.get('value')
        await callback.message.delete()

        match value:
            case 'back':
                await Handlers.__handle_admin_statistic_button(callback.message)
                await state.finish()
            case 'all_time':
                await callback.message.answer(f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –±–æ—Ç–æ–º: <b>{get_users_total_count()} —é–∑–µ—Ä–æ–≤</b>',
                                              reply_markup=Keyboards.back_markup)
            case 'month':
                await callback.message.answer(Messages.get_count_per_hours('–º–µ—Å—è—Ü', 30 * 24), reply_markup=Keyboards.back_markup)
            case 'week':
                await callback.message.answer(Messages.get_count_per_hours('–Ω–µ–¥–µ–ª—é', 7 * 24), reply_markup=Keyboards.back_markup)
            case 'day':
                await callback.message.answer(Messages.get_count_per_hours('—Å—É—Ç–∫–∏', 24), reply_markup=Keyboards.back_markup)
            case 'hour':
                await callback.message.answer(Messages.get_count_per_hours('—á–∞—Å', 1), reply_markup=Keyboards.back_markup)
            case 'other':
                await callback.message.answer('üîò –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ',
                                              reply_markup=Keyboards.back_markup)
                await state.set_state(StatsGetting.wait_for_hours_count)
                return

    @staticmethod
    async def __handle_get_hours_message(message: Message, state: FSMContext):
        if not message.text.isdigit():
            await message.answer('‚ùó–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:', reply_markup=Keyboards.back_markup)
            return

        users_count = get_users_by_hours(int(message.text))
        await message.answer(f'–ó–∞ <b>{message.text} —á–∞—Å–∞(–æ–≤)</b> –±–æ—Ç–æ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å <b>{users_count} —é–∑–µ—Ä–æ–≤</b>',
                             reply_markup=Keyboards.back_markup)
        await state.finish()

    @staticmethod
    async def __handle_back_callback(callback: CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await Handlers.__handle_admin_statistic_button(callback.message)
        if state:
            await state.finish()

    @classmethod
    def register_admin_statistic_handlers(cls, dp: Dispatcher):
        dp.register_message_handler(cls.__handle_admin_statistic_button, is_admin=True,
                                    text=Keyboards.reply_button_for_admin_menu.text)

        # dp.register_callback_query_handler(cls.__handle_back_callback, statistic_callback_data.filter(value='back'),
        #                                    state='*')
        dp.register_callback_query_handler(cls.__handle_show_stats_callback, statistic_callback_data.filter(), state='*')
        dp.register_message_handler(cls.__handle_get_hours_message,
                                           is_admin=True,
                                           state=StatsGetting.wait_for_hours_count)


