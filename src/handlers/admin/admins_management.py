from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.utils.callback_data import CallbackData

from src.misc.admin_states import AdminAdding
from src.database.admin import add_admin, delete_admin, is_admin_exist, get_admins


admins_management_callback_data = CallbackData('admins_management', 'action')


class Keyboards:
    reply_button_for_admin_menu = KeyboardButton('üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ üë§')

    menu_markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data=admins_management_callback_data.new('add')),
        InlineKeyboardButton('‚ûñ –ò—Å–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data=admins_management_callback_data.new('delete')),
        InlineKeyboardButton('üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', callback_data=admins_management_callback_data.new('list')),
    )

    cancel_markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton('üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=admins_management_callback_data.new('cancel'))
    )


class Handlers:
    @staticmethod
    async def __handle_admin_management_button(message: Message):
        await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=Keyboards.menu_markup)

    @staticmethod
    async def __handle_add_admin_callback(callback: CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await callback.message.answer('üîò –ü–æ–ª—É—á–∏—Ç–µ id —á–µ–ª–æ–≤–µ–∫–∞ –≤ –±–æ—Ç–µ @getmyid_bot. \n'
                                      '–ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞',
                                      reply_markup=Keyboards.cancel_markup)
        await state.set_state(AdminAdding.wait_for_new_admin_id)

    @staticmethod
    async def __handle_new_admins_message(message: Message, state: FSMContext):
        if message.text.isdigit():
            await state.finish()

            if is_admin_exist(int(message.text)):
                await message.answer('‚ùó –≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º!',
                                     reply_markup=Keyboards.cancel_markup)
                return

            add_admin(telegram_id=int(message.text), admin_name='–ê–¥–º–∏–Ω')
            await message.answer('‚úÖ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω')

        else:
            await message.answer('‚ùóid –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
                                 reply_markup=Keyboards.cancel_markup)

    @staticmethod
    async def __handle_delete_admin_callback(callback: CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await callback.message.answer('üîò –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ id –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å: ',
                                      reply_markup=Keyboards.cancel_markup)
        await state.set_state(AdminAdding.wait_for_admin_to_delete_id)

    @staticmethod
    async def __handle_admin_to_delete_id(message: Message, state: FSMContext):
        if delete_admin(message.text):
            await message.answer('‚úÖ –ê–¥–º–∏–Ω –∏—Å–∫–ª—é—á—ë–Ω!')
            await state.finish()
        else:
            await message.answer('‚ùó–ê–¥–º–∏–Ω–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
                                 reply_markup=Keyboards.cancel_markup)

    @staticmethod
    async def __handle_show_admins_list_callback(callback: CallbackQuery):
        await callback.message.delete()
        text = '<b>–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞:</b> \n\n'
        for tg_id, name in get_admins():
            text += f'<code>{tg_id}</code> ‚Äî <a href="tg://user?id={tg_id}">{name}</a> \n'
        await callback.message.answer(text, reply_markup=Keyboards.cancel_markup)

    @staticmethod
    async def __handle_cancel_management_callback(callback: CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await state.finish()
        await callback.message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=Keyboards.menu_markup)

    @classmethod
    def register_admin_management_handlers(cls, dp: Dispatcher):
        dp.register_message_handler(cls.__handle_admin_management_button,
                                    text=Keyboards.reply_button_for_admin_menu.text,
                                    is_admin=True)

        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        dp.register_callback_query_handler(cls.__handle_add_admin_callback,
                                           admins_management_callback_data.filter(action='add'),
                                           state=None)
        dp.register_message_handler(cls.__handle_new_admins_message, is_admin=True,
                                    state=AdminAdding.wait_for_new_admin_id)

        # —É–¥–∞–ª–µ–Ω–∏–µ
        dp.register_callback_query_handler(cls.__handle_delete_admin_callback,
                                           admins_management_callback_data.filter(action='delete'),
                                           state=None)
        dp.register_message_handler(cls.__handle_admin_to_delete_id, is_admin=True,
                                    state=AdminAdding.wait_for_admin_to_delete_id)

        # —Å–ø–∏—Å–æ–∫
        dp.register_callback_query_handler(cls.__handle_show_admins_list_callback,
                                           admins_management_callback_data.filter(action='list'))

        # –æ—Ç–º–µ–Ω–∞
        dp.register_callback_query_handler(cls.__handle_cancel_management_callback,
                                           admins_management_callback_data.filter(action='cancel'),
                                           state='*')



