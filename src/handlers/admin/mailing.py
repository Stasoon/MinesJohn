import asyncio
from typing import Iterable
from urllib.parse import urlparse

from aiogram import Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import RetryAfter
from aiogram.types import KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery

from src.misc.admin_states import MailingPostCreating
from src.database.user import get_user_ids
from src.utils import logger


class Keyboards:
    reply_button_for_admin_menu = KeyboardButton('‚úâ –†–∞—Å—Å—ã–ª–∫–∞ ‚úâ')

    add_button_markup = InlineKeyboardMarkup(row_width=1) \
        .add(InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–Ω–æ–ø–∫–∏', callback_data='continue_wout_button'))

    cancel_button = InlineKeyboardButton(text='üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_mailing')
    cancel_markup = InlineKeyboardMarkup().add(cancel_button)

    confirm_mailing_markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton('‚ùó –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ‚ùó', callback_data='start_mailing'),
        cancel_button)

    @staticmethod
    def get_markup_from_text(text: str) -> InlineKeyboardMarkup:
        markup = InlineKeyboardMarkup()  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
        lines = text.split('\n')
        for line in lines:
            items = line.strip().split('|')
            row_buttons = []
            for item in items:
                item_parts = item.strip().split()
                title = ' '.join(item_parts[:-1])  # –ë–µ—Ä–µ–º –≤—Å–µ —Å–ª–æ–≤–∞, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ, –∫–∞–∫ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                url = item_parts[-1]  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ —Å—á–∏—Ç–∞–µ–º —Å—Å—ã–ª–∫–æ–π
                button = InlineKeyboardButton(text=title, url=url)
                row_buttons.append(button)

            markup.row(*row_buttons)
        return markup


class Messages:
    @staticmethod
    def ask_for_post_content():
        return "–ü—Ä–∏—à–ª–∏—Ç–µ <u>—Ç–µ–∫—Å—Ç</u> –ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å. –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ <u>–º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã</u>"

    @staticmethod
    def get_button_data_incorrect():
        return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω–∞. ' \
               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, –≤–æ –≤—Ç–æ—Ä–æ–π - —Å—Å—ã–ª–∫—É.'

    @staticmethod
    def prepare_post():
        return "<i>–ü–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω:</i>"

    @staticmethod
    def get_mailing_canceled():
        return '‚õî –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'

    @staticmethod
    def get_markup_adding_manual():
        return '''–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –∞–¥—Ä–µ—Å —Å—Å—ã–ª–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–∫: 

Telegram telegram.org

–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –∑–∞ —Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ¬´|¬ª. –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Ä—è–¥ ‚Äì —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–∫: 

Telegram telegram.org | –ù–æ–≤–æ—Å—Ç–∏ telegram.org/blog
FAQ telegram.org/faq | –°–∫–∞—á–∞—Ç—å telegram.org/apps'''

    @staticmethod
    def ask_about_start_mailing():
        return "<u><b>–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?</b></u>"

    @staticmethod
    def get_mailing_started():
        return "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>"

    @staticmethod
    def get_successful_mailed(successful_count: int):
        return f'‚úÖ <b>–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ {successful_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.</b>'


class Utils:
    @classmethod
    async def send_message_to_user(cls, bot: Bot, user_id: int, from_chat_id: int, message_id: int,
                                   markup: InlineKeyboardMarkup = None) -> bool:
        try:  # –ø—Ä–æ–±—É–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ–º –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.copy_message(user_id, from_chat_id, message_id, reply_markup=markup)
        except RetryAfter as e:  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            await asyncio.sleep(e.timeout)
            return await cls.send_message_to_user(bot, user_id, from_chat_id, message_id, markup)
        except Exception as e:
            logger.error(e)
            return False
        else:  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            return True


class Mailer:
    @classmethod
    async def start_mailing(cls, bot: Bot, to_user_ids: Iterable, message_id: int, from_chat_id: int,
                            markup: InlineKeyboardMarkup = None) -> int:
        successful_count = 0
        try:
            for user_id in to_user_ids:
                if await Utils.send_message_to_user(bot, user_id, from_chat_id, message_id, markup):
                    successful_count += 1
                await asyncio.sleep(0.05)
        finally:
            logger.info(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, {successful_count} —é–∑–µ—Ä–æ–≤ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.')
            return successful_count


class Handlers:
    @staticmethod
    async def __handle_admin_mailing_button(message: Message, state: FSMContext):
        await message.answer(Messages.ask_for_post_content(),
                             reply_markup=Keyboards.cancel_markup)
        await state.set_state(MailingPostCreating.wait_for_content_message)

    @staticmethod
    async def __handle_post_content(message: Message, state: FSMContext):
        await state.update_data(message_id=message.message_id)

        await message.answer(Messages.get_markup_adding_manual(),
                             reply_markup=Keyboards.add_button_markup,
                             disable_web_page_preview=True)

        await state.set_state(MailingPostCreating.wait_for_button_data)

    @staticmethod
    async def __handle_url_button_data(message: Message, state: FSMContext):
        markup = Keyboards.get_markup_from_text(message.text)

        await message.answer(Messages.prepare_post())

        try:
            await Mailer.start_mailing(message.bot, to_user_ids=(message.from_user.id,),
                                       message_id=(await state.get_data()).get('message_id'),
                                       from_chat_id=message.from_id,
                                       markup=markup)
        except Exception as e:
            print(e)
            await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
                                 reply_markup=Keyboards.add_button_markup)
            return

        await state.update_data(markup=markup)
        await message.answer(Messages.ask_about_start_mailing(), reply_markup=Keyboards.confirm_mailing_markup)
        await state.set_state(MailingPostCreating.wait_for_confirm)

    @staticmethod
    async def __handle_continue_wout_button_callback(callback: CallbackQuery, state: FSMContext):
        await callback.message.delete()

        await callback.message.answer(Messages.prepare_post())
        await Mailer.start_mailing(callback.message.bot, to_user_ids=(callback.from_user.id,),
                                   message_id=(await state.get_data()).get('message_id'),
                                   from_chat_id=callback.from_user.id, markup=None)

        await callback.message.answer(Messages.ask_about_start_mailing(), reply_markup=Keyboards.confirm_mailing_markup)
        await state.set_state(MailingPostCreating.wait_for_confirm)

    @staticmethod
    async def __handle_confirm_mailing_callback(callback: CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await callback.message.answer(Messages.get_mailing_started())

        data = await state.get_data()
        successful_count = await Mailer.start_mailing(
            bot=callback.message.bot,
            to_user_ids=get_user_ids(),
            message_id=data.get('message_id'),
            from_chat_id=callback.from_user.id,
            markup=data.get('markup')
        )

        await callback.message.answer(Messages.get_successful_mailed(successful_count))
        await state.finish()

    @staticmethod
    async def __handle_cancel_mailing_callback(callback: CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await callback.message.answer(Messages.get_mailing_canceled())
        await state.finish()

    @classmethod
    def register_mailing_handlers(cls, dp: Dispatcher):
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –†–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
        dp.register_message_handler(cls.__handle_admin_mailing_button,
                                    is_admin=True,
                                    text=Keyboards.reply_button_for_admin_menu.text,
                                    state=None)

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞
        dp.register_message_handler(cls.__handle_post_content,
                                    is_admin=True,
                                    state=MailingPostCreating.wait_for_content_message,
                                    content_types=['text', 'photo', 'video', 'animation'])

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è url-–∫–Ω–æ–ø–∫–∏
        dp.register_message_handler(cls.__handle_url_button_data,
                                    content_types=['text'],
                                    state=MailingPostCreating.wait_for_button_data)

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–±—ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ–∑ url-–∫–Ω–æ–ø–∫–∏
        dp.register_callback_query_handler(cls.__handle_continue_wout_button_callback,
                                           state=MailingPostCreating.wait_for_button_data)

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–±—ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–Ω–∞—á–∞–ª–∞) —Ä–∞—Å—Å—ã–ª–∫–∏
        dp.register_callback_query_handler(cls.__handle_confirm_mailing_callback,
                                           is_admin=True,
                                           text='start_mailing',
                                           state=MailingPostCreating.wait_for_confirm)

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
        dp.register_callback_query_handler(cls.__handle_cancel_mailing_callback,
                                           text=Keyboards.cancel_button.callback_data, state='*')
